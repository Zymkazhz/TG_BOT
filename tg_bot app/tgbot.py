from aiogram import Bot, Dispatcher, executor, types
from config import TOKEN_API, PROXY_URL, PROXY_AUTH
from models import *
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import random
from datetime import datetime

bot = Bot(TOKEN_API, proxy=PROXY_URL, proxy_auth=PROXY_AUTH)
dp = Dispatcher(bot)

kb = ReplyKeyboardMarkup(
    resize_keyboard=True)
b1 = KeyboardButton('/description')
b2 = KeyboardButton('/top10token')
b3 = KeyboardButton('/estimate')
b4 = KeyboardButton(text='/help')

kb.add(b1).insert(b2).add(b3).insert(b4)

HELP_COMMAND = """
<b>/start</b> - <em>–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º</em>
<b>/help</b> - <em>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</em>
<b>/top10token</b> - <em>–¢–æ–ø 10 –º–æ–Ω–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ</em>
<b>/estimate</b> - <em>–û—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞</em>
<b>/description</b> - <em>–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞</em>
"""


async def on_startup(_):
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')


@dp.message_handler(commands=['estimate'])
async def vote_command(message: types.Message):
    ikb = InlineKeyboardMarkup(row_width=2)
    ikb1 = InlineKeyboardButton(text='üëç',
                                callback_data='like')
    ikb2 = InlineKeyboardButton(text='üëé',
                                callback_data='dislike')
    ikb.add(ikb1, ikb2)
    await bot.send_message(chat_id=message.from_user.id,
                           text='–ö–∞–∫ –≤–∞–º –±–æ—Ç !?üòâ',
                           reply_markup=ikb)


@dp.callback_query_handler()
async def vote_callback(callback: types.CallbackQuery):
    if callback.data == 'like':
        await callback.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É')
    await callback.answer(text='–ù–µ –≤—Ä–∏!')


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.reply(text=HELP_COMMAND, parse_mode='HTML')


@dp.message_handler(commands=['description'])
async def description(message: types.Message):
    await message.answer(text='–ë–æ—Ç –∫—Ä–∏–ø—Ç–æ–∏–Ω—Ñ–æ—Ä–º–µ—Ä —É–º–µ–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤—ã–¥–∞–≤–∞—Ç—å <b>–∞–∫—Ç—É–∞–ª—å–Ω—É—é</b>\n'
                              '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø 250 –º–æ–Ω–µ—Ç–∞—Ö, –∞ —Ç–∞–∫ –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ø10 –º–æ–Ω–µ—Ç –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏.\n'
                              '–¢–∞–∫ –∂–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –±–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–∞—Ä—É –º–æ–Ω–µ—Ç –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é.',
                         parse_mode='HTML')


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await bot.send_sticker(message.from_user.id, sticker='CAACAgIAAxkBAAEGjdpjgbf9NkywAm3WgFZGm_Lpy1i0VwACBAQAAsSraAse'
                                                         'YIn8uE2RPisE')
    await message.answer(text='<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç</b> üòâ\n'
                              '–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–µ—Ç–∞—Ö',
                         parse_mode='HTML',
                         reply_markup=kb)
    try:
        Persons.get(Persons.id_person == message.from_user.id)
        pass
    except:
        add_user_db(message.from_user.id)

    async def test(bot: Bot):
        with db:
            query_person = Persons.select()
            query_token = Token.select()
            list_name_token = []
            set_random_token = []
            answer = []
            for i in query_token:
                list_name_token.append(i.id_name)
            random_token_one = random.choice(list_name_token)
            random_token_two = random.choice(list_name_token)
            set_random_token.append(random_token_one)
            set_random_token.append(random_token_two)
            for i in set_random_token:
                i = i.capitalize()
                i = 'üî•' + str(i) + ' \n'
                answer.append(i)
            answer = ''.join(answer)
            for i in query_person:
                await bot.send_message(chat_id=i.id_name, text=f'–†–µ–∫–æ–º–µ–Ω–¥—É—é —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–Ω–µ—Ç—ã –∫ –ø–æ–∫—É–ø–∫–µ:\n'
                                                               f'{answer}'
                                                               f'–ù–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—èüòâ')

    scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
    scheduler.add_job(test, trigger='cron', day_of_week=0, hour=11,
                      start_date=datetime.now(), kwargs={'bot': bot})
    scheduler.start()


@dp.message_handler(commands=['top10token'])
async def top10token(message: types.Message):
    with db:
        query = Token.select().where(Token.market_cap_rank < 11)
        list_top10_token = []
        answer_top10_token = []
        for i in query:
            list_top10_token += i.id_name.split()
        for i in list_top10_token:
            i = i.capitalize()
            i = 'üîù' + str(i) + ' \n'
            answer_top10_token += i
        answer_top10_token = ''.join(answer_top10_token)
        await message.answer(text=answer_top10_token)


@dp.message_handler()
async def token_info(message: types.Message):
    query_user = message.text.lower()
    with db:
        try:
            query_name = Token.get(Token.id_name == query_user)
            await message.answer(text=f'–ò–º—è: {query_name.name}\n'
                                      f'–°–∏–º–≤–æ–ª: {query_name.symbol}\n'
                                      f'–¶–µ–Ω–∞: {query_name.current_price}\n'
                                      f'–ü–æ–∑–∏—Ü–∏—è –Ω–∞ –º–∞—Ä–∫–µ—Ç–µ: {query_name.market_cap_rank}\n'
                                      f'–°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏: {query_name.high_24h}\n'
                                      f'–°–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏: {query_name.low_24h}\n'
                                      f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —Å—É—Ç–∫–∏: {round(float(query_name.price_change_24h), 2)}')
        except:
            try:
                query_symbol = Token.get(Token.symbol == query_user)
                await message.answer(text=f'–ò–º—è: {query_symbol.name}\n'
                                          f'–°–∏–º–≤–æ–ª: {query_symbol.symbol}\n'
                                          f'–¶–µ–Ω–∞: {query_symbol.current_price}\n'
                                          f'–ü–æ–∑–∏—Ü–∏—è –Ω–∞ –º–∞—Ä–∫–µ—Ç–µ: {query_symbol.market_cap_rank}\n'
                                          f'–°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏: {query_symbol.high_24h}\n'
                                          f'–°–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏: {query_symbol.low_24h}\n'
                                          f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —Å—É—Ç–∫–∏: {round(float(query_symbol.price_change_24h), 2)}')
            except:
                await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã üôÑ')


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
